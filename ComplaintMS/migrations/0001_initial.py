# Generated by Django 4.2.6 on 2023-11-06 10:45

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('djtriggers', '0008_alter_trigger_id_alter_triggerresult_id'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('Electricity', 'Electricity'), ('Carpentry', 'Carpentry'), ('Plumbing', 'Plumbing'), ('Food', 'Food'), ('Water', 'Water'), ('Cleaning', 'Cleaning')], default='Cleaning', max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Domain',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domain', models.CharField(choices=[('Hostel', 'Hostel'), ('Library', 'Library'), ('Department', 'Department')], default='Hostel', max_length=20)),
                ('domain_name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='leave_trigger',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('djtriggers.trigger',),
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('Administrator', 'ADMINISTRATOR'), ('Student', 'STUDENT')], default='Student', max_length=255, verbose_name='Type')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Workers',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=13)),
                ('status', models.CharField(choices=[('Available', 'Available'), ('On_leave', 'On_leave'), ('Occupied', 'Occupied')], default='Available', max_length=20)),
                ('task_count', models.IntegerField(default=0)),
                ('leave_rsn', models.TextField(blank=True)),
                ('date_from', models.DateField(null=True)),
                ('date_to', models.DateField(null=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ComplaintMS.category')),
            ],
        ),
        migrations.CreateModel(
            name='Complaints',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('issue', models.TextField()),
                ('status', models.CharField(choices=[('Opened', 'Opened'), ('In_progress', 'In_progress'), ('Resolved', 'Resolved'), ('Closed', 'Closed')], default='Opened', max_length=50)),
                ('date_issued', models.DateTimeField(auto_now_add=True)),
                ('date_resolved', models.DateTimeField(blank=True, null=True)),
                ('date_assigned', models.DateTimeField(blank=True, null=True)),
                ('is_unaddressed', models.BooleanField(default=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('assignee', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ComplaintMS.workers')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ComplaintMS.category')),
                ('domain', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ComplaintMS.domain')),
            ],
        ),
        migrations.CreateModel(
            name='AdministratorAdditional',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone', models.CharField(max_length=13, null=True)),
                ('domain', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ComplaintMS.domain')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Administrator',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('ComplaintMS.customuser',),
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('ComplaintMS.customuser',),
        ),
        migrations.CreateModel(
            name='Reviews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review', models.TextField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('complaint', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='ComplaintMS.complaints')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ComplaintMS.student')),
            ],
        ),
        migrations.AddField(
            model_name='complaints',
            name='assigner',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigner', to='ComplaintMS.administrator'),
        ),
        migrations.AddField(
            model_name='complaints',
            name='issuer',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='issuer', to='ComplaintMS.student'),
        ),
    ]
